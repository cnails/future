#pragma checksum "D:\Projects\Залупа\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8d6eece897b701f99442e485bc06e753cb30105f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Projects\Залупа\Views\_ViewImports.cshtml"
using SignalR_Vuejs__Demo;

#line default
#line hidden
#line 2 "D:\Projects\Залупа\Views\_ViewImports.cshtml"
using SignalR_Vuejs__Demo.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8d6eece897b701f99442e485bc06e753cb30105f", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"10845306c5a23d9ea699b61b713dd3996296f47f", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Новая папка/StyleSheet.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\Projects\Залупа\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "My Chat";

#line default
#line hidden
            BeginContext(43, 1330, true);
            WriteLiteral(@"
<div>


    <div id=""chatApp"">
        <div class=""upper"">
            <input type=""button"" />


            <div v-for=""(n,index) in days"" v-on:click=""radioClick($event)"" class=""diactivate"" v-bind:id=""index"">
                <span>{{n.name}}</span>
                <span>{{n.date}}</span>


            </div>

            <input type=""button"" />
        </div>
        <div class=""works"">
            <windows-info v-for=""n in windows"" v-bind=""n"" v-bind:key=""n.id""></windows-info>
        </div>
    </div>


    <template id=""window"">
        <div class=""window"">
            <div class=""title"">{{ name }}</div>
            <hr-info v-for=""(n,index) in hr"" v-bind=""n"" v-bind:data=""n"" v-bind:key=""n.id""></hr-info>
        </div>
    </template>

    <template id=""hr"">
        <div class=""hr"">

            <button id=""show-modal"" v-on:click=""showModal=true""> {{person}} ({{leading}})</button>
            <modal v-if=""showModal"" v-on:cclose=""showModal = false"">


                <d");
            WriteLiteral(@"iv slot=""body"">
                    <input type=""text"" class=""title"" v-bind:value.sync=""person"" id=""person"" />
                    <input type=""text"" class=""title"" v-bind:value.sync=""leading"" id=""leading"" />

                </div>
            </modal>


        </div>
    </template>

</div>
");
            EndContext();
            BeginContext(1373, 75, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "8d6eece897b701f99442e485bc06e753cb30105f6074", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1448, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(1450, 36, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8d6eece897b701f99442e485bc06e753cb30105f7412", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1486, 14468, true);
            WriteLiteral(@"
<script src=""https://cdn.jsdelivr.net/npm/vue/dist/vue.js""></script>
<script type=""text/x-template"" id=""modal-template"">
    <transition name=""modal"">
        <div class=""modal-mask"">
            <div class=""modal-wrapper"">
                <div class=""modal-container"">

                    <div class=""modal-header"">
                        <slot name=""header"">
                            default header
                        </slot>
                    </div>

                    <div class=""modal-body"">
                        <slot name=""body"">
                            default body
                        </slot>
                    </div>

                    <div class=""modal-footer"">
                        <slot name=""footer"">

                        </slot>
                        <button class=""modal-default-button""  v-on:click=""$emit('close');onChange($event)"" >
                            Сохранить
                        </button>
                    </div>
       ");
            WriteLiteral(@"         </div>
            </div>
        </div>
    </transition>
</script>
<script>

     var date = new Date;
    //console.log(date.getDay())

    //console.log(date)

    function today() {
        var dayW = new Date();
        var dd = dayW.getDate();
        var mm = dayW.getMonth() + 1;
        if (mm.toString().length < 2) {
            mm=""0""+mm
        }
        var yyyy = dayW.getFullYear();
        var td = dd + '.' + mm + '.' + yyyy;
        return td;
    }
    document.addEventListener(""DOMContentLoaded"", function (event) {
        Vue.component('modal', {
            template: '#modal-template',
            methods: {
                onChange: function (event) {
                    hh = this.$parent;
                    //console.log(this.$slots.body[0].children[1].elm);
                    dd = hh.$attrs.data;

                    dd.person = this.$slots.body[0].children[1].elm.previousElementSibling.value
                    dd.leading = this.$slots.body[0");
            WriteLiteral(@"].children[1].elm.nextElementSibling.value

                    //""%cТехт"", ""font-size: 20px; color: blue;""
                    mes = ""%cОтправка Время:"" + hh._props.name + "" ИМЯ: "" + hh.$attrs.data.person + ""\nПригласил: "" + hh.$attrs.data.leading;
                    console.log(mes, 'font-size:24px;color: #bada55')



                    this.$root.connection.invoke('SendMessage', dd.person, dd.leading, dd.name, hh.$parent.name).catch(function (err) {
                        return console.error(err.toSting());
                    });
                    Send = """"
                    console.log('%cSEND', 'font-size:24px;color: red');

                }
            },
        });

        Vue.component('windows-info', {

            template: '#window',
            props: ['name', 'hr'],
        });


        Vue.component('hr-info', {
            template: '#hr',
            component: 'modal',
            props: ['name', 'person', 'leading', 'showModal'],

            method");
            WriteLiteral(@"s: {
                onChange: function (event) {
                    dd = this.$attrs.data;
                    dd.person = event.target.value

                    console.log(this._props.name)
                    console.log(this.$attrs.data.person)

                    if (dd.person && dd.person) {
                        this.$root.connection.invoke('SendMessage', dd.person, dd.leading, dd.name, this.$parent.name).catch(function (err) {
                            return console.error(err.toSting());
                        });
                        console.error('SENDING');
                    }
                }
            },

        });



        var app = new Vue({

            el: '#chatApp',

            data: {

                //showModal: false,
                days: [
                    {
                        name: 'Понедельник',
                        date: ""32131"",
                    },
                    {
                        name: 'Вторник',");
            WriteLiteral(@"
                        date: ""32131"",
                    },
                    {
                        name: 'Среда',
                        date: ""32131"",
                    },
                    {
                        name: 'Четверг',
                        date: ""32131"",
                    }, {
                        name: 'Пятница',
                        date: ""32131"",
                    },
                    {
                        name: 'Суббота',
                        date: ""32131"",
                    },
                    {
                        name: 'Воскресенье',
                        date: ""32131"",
                    }

                ],
                userName: """",
                userMessage: """",
                connection: """",
                windows: [
                    {
                        name: ""windows 1"",
                        hr: [
                            {
                                name: ""08:30"",
         ");
            WriteLiteral(@"                       person: ""Иванов И.И"",

                                leading: 'Журавлев'
                            },
                            {
                                name: ""09:00"",
                                person: """",
                                leading: 'Журавлев'
                            },
                            {
                                name: ""10:00"",
                                person: ""Иванов И.И"",
                                leading: 'Журавлев'
                            },
                            {
                                name: ""11:00"",
                                person: """",
                                leading: 'Журавлев'
                            },
                            {
                                name: ""12:00"",
                                person: ""Иванов И.И"",
                                leading: 'Журавлев'
                            },
                            {
    ");
            WriteLiteral(@"                            name: ""13:30"",
                                person: """",
                                leading: 'Журавлев'
                            },
                            {
                                name: ""14:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""15:00"",
                                person: """"
                            },
                            {
                                name: ""16:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""16:30"",
                                person: """"
                            }
                        ]
                    },
                    {
                        name: ""windows 2"",
                        hr: [
                            {
                               ");
            WriteLiteral(@" name: ""08:30"",
                                person: ""Иванов И.И""

                            },
                            {
                                name: ""09:00"",
                                person: """"
                            },
                            {
                                name: ""10:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""11:00"",
                                person: """"
                            },
                            {
                                name: ""12:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""13:30"",
                                person: """"
                            },
                            {
                                name: ""14:00"",
                                person: ""Иван");
            WriteLiteral(@"ов И.И""
                            },
                            {
                                name: ""15:00"",
                                person: """"
                            },
                            {
                                name: ""16:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""16:30"",
                                person: """"
                            }
                        ]
                    },
                    {
                        name: ""windows 3"", hr: [
                            {
                                name: ""08:30"",
                                person: ""Иванов И.И""

                            },
                            {
                                name: ""09:00"",
                                person: """"
                            },
                            {
                                ");
            WriteLiteral(@"name: ""10:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""11:00"",
                                person: """"
                            },
                            {
                                name: ""12:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""13:30"",
                                person: """"
                            },
                            {
                                name: ""14:00"",
                                person: ""Иванов И.И""
                            },
                            {
                                name: ""15:00"",
                                person: """"
                            },
                            {
                                name: ""16:00"",
                                person: ""Иванов ");
            WriteLiteral(@"И.И""
                            },
                            {
                                name: ""16:30"",
                                person: """"
                            }
                        ]
                    }
                ]


            },
            methods: {
                submitCard: function () {
                    if (this.userName && this.userMessage) {
                        this.connection.invoke('SendMessage', this.userName, this.userMessage).catch(function (err) {
                            return console.error(err.toSting());
                        });

                        this.userName = '';
                        this.userMessage = '';
                    }
                },
                radioClick: function (event) {


                    var d = event.path[2].childNodes;
                    var element = event.path[1];

                    console.log(element.id);

                    var arr = [0, 1, 2, 3, 4, 5, 6];
");
            WriteLiteral(@"
                    arr.forEach(function (item, i, arr) {
                        document.getElementById(item).classList = """";

                        if (item == element.id) {
                            //document.getElementById(item).classList = """";
                            document.getElementById(item).classList.add(""activate"");
                        } else {
                            document.getElementById(item).classList.add(""diactivate"");

                        }

                    });


                    //if (element.classList.contains(""diactivate"")) {



                    //} else {
                    //    element.classList = """";
                    //    element.classList.add(""diactivate"");
                    //}


                }

            },
            created: function () {
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl('/chatHub')
                    .configureLogging(signalR.LogLevel.In");
            WriteLiteral(@"formation)
                    .build();
                this.connection.start().catch(function (err) {
                    return console.error(err.toSting());
                });
                var connection = new signalR.HubConnectionBuilder()
                    .withUrl('/chatHub')
                    .configureLogging(signalR.LogLevel.Information)
                    .build();
                connection.on('ReceiveDate', function (user, message, window) {

                    console.log(""Получение: "" + user + "" ___ "" + message + "" ___ "" + window)
                });
                connection.start()
                    .then(function () {
                        console.log('connection started');
                        connection.invoke('SendDate', today(), today(), today()).catch(function (err) {
                            return console.error(err);
                        });
                    })
                    .catch(error => {
                        console.error(e");
            WriteLiteral(@"rror.message);
                    });
            },
            mounted: function () {
                var thisVue = this;
                thisVue.connection.start();

                thisVue.connection.on('ReceiveMessage', function (user, leading, message, window) {

                    const even1 = (element) => element.name == window;
                    const even2 = (element) => element.name == message;
                    thisVue._data.windows.find(even1).hr.find(even2).person = user
                    thisVue._data.windows.find(even1).hr.find(even2).leading = leading
                    console.log(""Получение: "" + user + ""("" + leading + "")"" + "" ___ "" + message + "" ___ "" + window)
                });

                var t = document.getElementById(date.getDay() - 1);

                t.classList = '';
                t.classList.add(""activate"");
                var arr = [0, 1, 2, 3, 4, 5, 6];

                arr.forEach(function (item, i, arr) {

                    documen");
            WriteLiteral("t.getElementById(item).children[1].innerHTML = today();\r\n\r\n\r\n\r\n                });\r\n            }\r\n\r\n        });\r\n    });\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
